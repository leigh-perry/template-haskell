{-# START_FILE benchmark/Main.hs #-}
-- You can benchmark your code quickly and effectively with Criterion. See its
-- website for help: <http://www.serpentine.com/criterion/>.
import Criterion.Main

main :: IO ()
main = defaultMain [bench "const" (whnf const ())]

{-# START_FILE stack.yaml #-}
# This file was automatically generated by 'stack init'
#
# Some commonly used options have been documented as comments in this file.
# For advanced use and comprehensive documentation of the format, please see:
# https://docs.haskellstack.org/en/stable/yaml_configuration/

# Resolver to choose a 'specific' stackage snapshot or a compiler version.
# A snapshot resolver dictates the compiler version and the set of packages
# to be used for project dependencies. For example:
#
# resolver: lts-3.5
# resolver: nightly-2015-09-21
# resolver: ghc-7.10.2
#
# The location of a snapshot can be provided as a file or url. Stack assumes
# a snapshot provided as a file might change, whereas a url resource does not.
#
# resolver: ./custom-snapshot.yaml
# resolver: https://example.com/snapshots/2018-01-01.yaml
resolver: lts-13.27

# User packages to be built.
# Various formats can be used as shown in the example below.
#
# packages:
# - some-directory
# - https://example.com/foo/bar/baz-0.0.2.tar.gz
#   subdirs:
#   - auto-update
#   - wai
packages:
- .
# Dependency packages to be pulled from upstream that are not in the resolver.
# These entries can reference officially published versions as well as
# forks / in-progress versions pinned to a git hash. For example:
#
# extra-deps:
# - acme-missiles-0.3
# - git: https://github.com/commercialhaskell/stack.git
#   commit: e7b331f14bcffb8367cd58fbfc8b40ec7642100a
#
# extra-deps: []

# Override default flag values for local packages and extra-deps
# flags: {}

# Extra package databases containing global packages
# extra-package-dbs: []

# Control whether we use the GHC we find on the path
# system-ghc: true
#
# Require a specific version of stack, using version ranges
# require-stack-version: -any # Default
# require-stack-version: ">=2.1"
#
# Override the architecture used by stack, especially useful on Windows
# arch: i386
# arch: x86_64
#
# Extra directories used by stack for building
# extra-include-dirs: [/path/to/dir]
# extra-lib-dirs: [/path/to/dir]
#
# Allow a newer minor version of GHC than the snapshot specifies
# compiler-check: newer-minor

{-# START_FILE Setup.hs #-}
-- This script is used to build and install your package. Typically you don't
-- need to change it. The Cabal documentation has more information about this
-- file: <https://www.haskell.org/cabal/users-guide/installing-packages.html>.
import qualified Distribution.Simple

main :: IO ()
main = Distribution.Simple.defaultMain

{-# START_FILE app/Main.hs #-}
import qualified Program

main :: IO ()
main = Program.run

{-# START_FILE LICENSE #-}
Copyright (c) 2018 Leigh Perry

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions: 

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software. 

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. 

{-# START_FILE test/Main.hs #-}
import Program
import qualified Test.Tasty
import Test.Tasty.Hspec

main :: IO ()
main = do
  test <- testSpec "lptemplateservicename" spec
  Test.Tasty.defaultMain test

spec :: Spec
spec =
  parallel $ do
    it "matches directory to be included" $ Program.isRelevantDir "/srcFilepath" "/srcFilepath/path" `shouldBe` True
    it "matches directory .git to be excluded" $
      Program.isRelevantDir "/srcFilepath" "/srcFilepath/.git" `shouldBe` False
    it "matches directory .stack-work to be excluded" $
      Program.isRelevantDir "/srcFilepath" "/srcFilepath/.stack-work" `shouldBe` False
    it "is not fooled by directory .stack-workxxx" $
      Program.isRelevantDir "/srcFilepath" "/srcFilepath/.stack-workxxx" `shouldBe` True
    it "matches stack.yaml.lock to be excluded" $
      Program.isRelevantFile "/srcFilepath" "/srcFilepath/stack.yaml.lock" "stack.yaml.lock" `shouldBe` False
    it "is not fooled by stack.yaml.lockxxx" $
      Program.isRelevantFile "/srcFilepath" "/srcFilepath/stack.yaml.lockxxx" "stack.yaml.lockxxx" `shouldBe` True

{-# START_FILE README.md #-}
# lptemplateservicename

`lptemplateservicename` is an application that supports the creation of `stack new` templates.

## Background

`stack new` takes a file with the extension `.hsfiles` such as
[this](https://github.com/leigh-perry/template-haskell/blob/master/lpskel.hsfiles)
and uses the contents of that file as a template.
`.hsfiles` files can specify multiple files by separating the contents of those files
with the `{-# START_FILE #-}` pragma. When the template is passed to `stack new`,
Stack will create those files and any specified directories according to the `{-# START_FILE #-}`
pragmas, eg `{-# START_FILE src/Program.hs #-}` will be expanded as a file `src/Program.hs`.

## Why This App?

Preparing and maintaining the contents of the `.hsfiles` file is painful. With this app,
you can point it a sample project and its subdirectories. `lptemplateservicename` will then crunch
the sample project files into an overall `.hsfiles`.

`lptemplateservicename` omits files and directories such as `.git` and `out`.

## Usage

`lptemplateservicename <base input directory> <target hsfiles path>`

{-# START_FILE .gitignore #-}
.stack-work
.idea
out
*.iml
*.lock
.DS_Store

/*.cabal

{-# START_FILE package.yaml #-}
# This YAML file describes your package. Stack will automatically generate a
# Cabal file when you run `stack build`. See the hpack website for help with
# this file: <https://github.com/sol/hpack>.
name: lptemplateservicename
version: '0.0.0'
github: "githubuser/lptemplateservicename"
license: MIT
author: "Author name here"
maintainer: "Author name here"
# synopsis: A new template package.
# description: lptemplateservicename is a new template package.
# category: Other

extra-source-files:
- package.yaml
- README.md
- stack.yaml

ghc-options: -Wall

library:
  dependencies:
  - base
  - directory
  - filepath
  - unix
  source-dirs: src

executables:
  lptemplateservicename:
    source-dirs: app
    main: Main.hs
    dependencies:
    - base
    - lptemplateservicename
    ghc-options:
    - -rtsopts
    - -threaded
    - -with-rtsopts=-N

benchmarks:
  lptemplateservicename-benchmarks:
    source-dirs: benchmark
    main: Main.hs
    dependencies:
    - base
    - lptemplateservicename
    - criterion
    ghc-options:
    - -rtsopts
    - -threaded
    - -with-rtsopts=-N

tests:
  lptemplateservicename-test-suite:
    source-dirs: test
    main: Main.hs
    dependencies:
    - base
    - lptemplateservicename
    - tasty
    - tasty-hspec
    ghc-options:
    - -rtsopts
    - -threaded
    - -with-rtsopts=-N

{-# START_FILE src/Program.hs #-}
module Program
  ( run
  , isRelevantDir
  , isRelevantFile
  ) where

import Control.Monad

--import Debug.Trace
import Data.Foldable (traverse_)
import Data.Functor ((<&>))
import Data.List (intercalate, isPrefixOf)
import System.Directory (listDirectory)
import System.Environment (getArgs)
import System.FilePath.Posix ((</>), takeExtension)
import System.Posix.Files (getFileStatus, isDirectory)

type Filename = String

type TopLevelPath = FilePath

type RelativePath = FilePath

type HsfilesPath = FilePath

type DirPredicate = TopLevelPath -> FilePath -> Bool

type FilePredicate = TopLevelPath -> FilePath -> Filename -> Bool

run :: IO ()
run = do
  args <- getArgs
  case args of
    [srcFilepath, summaryFile] -> templatise srcFilepath summaryFile
    _ -> putStrLn "Usage: lptemplateservicename <source dir> <target .hsfiles file>"

templatise :: TopLevelPath -> HsfilesPath -> IO ()
templatise srcFilepath summaryFile = do
  files <- relevantFiles srcFilepath srcFilepath isRelevantDir isRelevantFile
  writeTo srcFilepath summaryFile files
  traverse_ putStrLn files

isRelevantDir :: DirPredicate
isRelevantDir srcFilepath path = not $ any (`isPrefixOf` pathWithSlash) exclusionList
  where
    pathWithSlash = path <> "/"
    exclusionList = [".git", ".idea", ".stack-work", "out"] <&> (\s -> (srcFilepath </> s) <> "/")

isRelevantFile :: FilePredicate
isRelevantFile _ _ filename = filename `notElem` [".DS_Store", "stack.yaml.lock"] && takeExtension filename /= ".iml"

relevantFiles :: TopLevelPath -> FilePath -> DirPredicate -> FilePredicate -> IO [RelativePath]
relevantFiles srcFilepath dir includeDirPredicate includeFilePredicate = do
  ds <- listDirectory dir
  paths <-
    forM ds $ \filename -> do
      let filepath = dir </> filename
      s <- getFileStatus filepath
      if isDirectory s
        then if includeDirPredicate srcFilepath filepath
               then relevantFiles srcFilepath filepath includeDirPredicate includeFilePredicate
               else return []
        else if includeFilePredicate srcFilepath filepath filename
               then return [filepath]
               else return []
  return $ concat paths

writeTo :: TopLevelPath -> HsfilesPath -> [RelativePath] -> IO ()
writeTo srcFilepath summaryFile files = do
  contents <- forM files $ fileContents srcFilepath
  writeFile summaryFile $ intercalate "\n" contents

fileContents :: TopLevelPath -> FilePath -> IO String
fileContents srcFilepath filename =
  let prefixRemoved = dropWhile (== '/') $ drop (length srcFilepath) filename
   in readFile filename <&> (\s -> "{-# START_FILE " <> prefixRemoved <> " #-}" <> "\n" <> s)
