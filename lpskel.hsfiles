{-# START_FILE benchmark/Main.hs #-}
-- You can benchmark your code quickly and effectively with Criterion. See its
-- website for help: <http://www.serpentine.com/criterion/>.
import Criterion.Main

main :: IO ()
main = defaultMain [bench "const" (whnf const ())]

{-# START_FILE stack.yaml #-}
# This file was automatically generated by 'stack init'
#
# Some commonly used options have been documented as comments in this file.
# For advanced use and comprehensive documentation of the format, please see:
# https://docs.haskellstack.org/en/stable/yaml_configuration/

# Resolver to choose a 'specific' stackage snapshot or a compiler version.
# A snapshot resolver dictates the compiler version and the set of packages
# to be used for project dependencies. For example:
#
# resolver: lts-3.5
# resolver: nightly-2015-09-21
# resolver: ghc-7.10.2
#
# The location of a snapshot can be provided as a file or url. Stack assumes
# a snapshot provided as a file might change, whereas a url resource does not.
#
# resolver: ./custom-snapshot.yaml
# resolver: https://example.com/snapshots/2018-01-01.yaml
resolver: lts-13.27

# User packages to be built.
# Various formats can be used as shown in the example below.
#
# packages:
# - some-directory
# - https://example.com/foo/bar/baz-0.0.2.tar.gz
#   subdirs:
#   - auto-update
#   - wai
packages:
- .
# Dependency packages to be pulled from upstream that are not in the resolver.
# These entries can reference officially published versions as well as
# forks / in-progress versions pinned to a git hash. For example:
#
# extra-deps:
# - acme-missiles-0.3
# - git: https://github.com/commercialhaskell/stack.git
#   commit: e7b331f14bcffb8367cd58fbfc8b40ec7642100a
#
# extra-deps: []

# Override default flag values for local packages and extra-deps
# flags: {}

# Extra package databases containing global packages
# extra-package-dbs: []

# Control whether we use the GHC we find on the path
# system-ghc: true
#
# Require a specific version of stack, using version ranges
# require-stack-version: -any # Default
# require-stack-version: ">=2.1"
#
# Override the architecture used by stack, especially useful on Windows
# arch: i386
# arch: x86_64
#
# Extra directories used by stack for building
# extra-include-dirs: [/path/to/dir]
# extra-lib-dirs: [/path/to/dir]
#
# Allow a newer minor version of GHC than the snapshot specifies
# compiler-check: newer-minor

{-# START_FILE Setup.hs #-}
-- This script is used to build and install your package. Typically you don't
-- need to change it. The Cabal documentation has more information about this
-- file: <https://www.haskell.org/cabal/users-guide/installing-packages.html>.
import qualified Distribution.Simple

main :: IO ()
main = Distribution.Simple.defaultMain

{-# START_FILE app/Main.hs #-}
import qualified Program

main :: IO ()
main = Program.main

{-# START_FILE test/Main.hs #-}
-- Tasty makes it easy to test your code. It is a test framework that can
-- combine many different types of tests into one suite. See its website for
-- help: <http://documentup.com/feuerbach/tasty>.
import qualified Test.Tasty

-- Hspec is one of the providers for Tasty. It provides a nice syntax for
-- writing tests. Its website has more info: <https://hspec.github.io>.
import Test.Tasty.Hspec

main :: IO ()
main = do
  test <- testSpec "make-hs-template" spec
  Test.Tasty.defaultMain test

spec :: Spec
spec =
  parallel $ do
    it "is trivially true" $ True `shouldBe` True
    it "is trivially invertible" $ False `shouldBe` not True

{-# START_FILE README.md #-}
# make-hs-template

## Overview

`make-hs-template` is an application that targets the create of `stack new` templates.

`stack new` takes a file with the extension `.hsfiles` such as
[this](https://github.com/leigh-perry/template-haskell/blob/master/lpskel.hsfiles)
and uses the contents of that file as a template.
`.hsfiles` files can specify multiple files by separating the contents of those files
with the `{-# START_FILE #-}` pragma. When the template is passed to `stack new`,
Stack will create those files and any specified directories according to the `{-# START_FILE #-}`
pragmas, eg `{-# START_FILE src/Program.hs #-}` will be expanded as a file `src/Program.hs`.

Preparing and maintaining the contents of the `.hsfiles` file is painful. With this app,
you can point it a sample project and its subdirectories. `make-hs-template` will then crunch
the sample project files it into an overall `.hsfiles`.

`make-hs-template` omits files and directories such as `.git` and `out`.

## Usage

`make-hs-template <base input directory> <target hsfiles path>`

{-# START_FILE make-hs-template.cabal #-}
cabal-version: 1.12

-- This file has been generated from package.yaml by hpack version 0.31.2.
--
-- see: https://github.com/sol/hpack
--
-- hash: 9429da4b89d02501c31c7cf41d01d32bec7f74625b884c728ef4d8c52eaff705

name:           make-hs-template
version:        0.0.0
homepage:       https://github.com/githubuser/make-hs-template#readme
bug-reports:    https://github.com/githubuser/make-hs-template/issues
author:         Author name here
maintainer:     Author name here
license:        MIT
build-type:     Simple
extra-source-files:
    package.yaml
    README.md
    stack.yaml

source-repository head
  type: git
  location: https://github.com/githubuser/make-hs-template

library
  exposed-modules:
      Program
  other-modules:
      Paths_make_hs_template
  hs-source-dirs:
      src
  ghc-options: -Wall
  build-depends:
      base
    , directory
    , filepath
    , unix
  default-language: Haskell2010

executable make-hs-template
  main-is: Main.hs
  other-modules:
      Paths_make_hs_template
  hs-source-dirs:
      app
  ghc-options: -Wall -rtsopts -threaded -with-rtsopts=-N
  build-depends:
      base
    , make-hs-template
  default-language: Haskell2010

test-suite make-hs-template-test-suite
  type: exitcode-stdio-1.0
  main-is: Main.hs
  other-modules:
      Paths_make_hs_template
  hs-source-dirs:
      test
  ghc-options: -Wall -rtsopts -threaded -with-rtsopts=-N
  build-depends:
      base
    , make-hs-template
    , tasty
    , tasty-hspec
  default-language: Haskell2010

benchmark make-hs-template-benchmarks
  type: exitcode-stdio-1.0
  main-is: Main.hs
  other-modules:
      Paths_make_hs_template
  hs-source-dirs:
      benchmark
  ghc-options: -Wall -rtsopts -threaded -with-rtsopts=-N
  build-depends:
      base
    , criterion
    , make-hs-template
  default-language: Haskell2010

{-# START_FILE .gitignore #-}
.stack-work
.idea
out
*.iml
*.lock
.DS_Store

/*.cabal

{-# START_FILE package.yaml #-}
# This YAML file describes your package. Stack will automatically generate a
# Cabal file when you run `stack build`. See the hpack website for help with
# this file: <https://github.com/sol/hpack>.
name: make-hs-template
version: '0.0.0'
github: "githubuser/make-hs-template"
license: MIT
author: "Author name here"
maintainer: "Author name here"
# synopsis: A new template package.
# description: make-hs-template is a new template package.
# category: Other

extra-source-files:
- package.yaml
- README.md
- stack.yaml

ghc-options: -Wall

library:
  dependencies:
  - base
  - directory
  - filepath
  - unix
  source-dirs: src

executables:
  make-hs-template:
    source-dirs: app
    main: Main.hs
    dependencies:
    - base
    - make-hs-template
    ghc-options:
    - -rtsopts
    - -threaded
    - -with-rtsopts=-N

benchmarks:
  make-hs-template-benchmarks:
    source-dirs: benchmark
    main: Main.hs
    dependencies:
    - base
    - make-hs-template
    - criterion
    ghc-options:
    - -rtsopts
    - -threaded
    - -with-rtsopts=-N

tests:
  make-hs-template-test-suite:
    source-dirs: test
    main: Main.hs
    dependencies:
    - base
    - make-hs-template
    - tasty
    - tasty-hspec
    ghc-options:
    - -rtsopts
    - -threaded
    - -with-rtsopts=-N

{-# START_FILE src/Program.hs #-}
module Program
  ( main
  ) where

import Control.Monad

--import Debug.Trace
import Data.Foldable (traverse_)
import Data.Functor ((<&>))
import Data.List (intercalate, isPrefixOf)
import System.Directory (listDirectory)
import System.Environment (getArgs)
import System.FilePath.Posix ((</>))
import System.FilePath.Posix (takeExtension)
import System.Posix.Files (getFileStatus, isDirectory)

main :: IO ()
main = do
  args <- getArgs
  case args of
    [srcFilepath, summaryFile] -> templatise srcFilepath summaryFile
    _ -> putStrLn "Usage: make_hs_template <source dir> <target.summaryFile>"

templatise :: FilePath -> FilePath -> IO ()
templatise srcFilepath summaryFile = do
  files <- relevantFiles srcFilepath srcFilepath isRelevantDir isRelevantFile
  writeTo srcFilepath summaryFile files
  traverse_ putStrLn files

isRelevantDir :: FilePath -> FilePath -> Bool
isRelevantDir srcFilepath path =
  not $ any (`isPrefixOf` path) ([".git", ".idea", ".stack-work", "out"] <&> (srcFilepath </>))

isRelevantFile :: FilePath -> FilePath -> FilePath -> Bool
isRelevantFile _ _ fp = fp `notElem` [".DS_Store", "stack.yaml.lock"] && takeExtension fp /= ".iml"

relevantFiles ::
     FilePath
  -> FilePath
  -> (FilePath -> FilePath -> Bool)
  -> (FilePath -> FilePath -> FilePath -> Bool)
  -> IO [FilePath]
relevantFiles srcFilepath dir includeDirPredicate includeFilePredicate = do
  ds <- listDirectory dir
  paths <-
    forM ds $ \fp -> do
      let path = dir </> fp
      s <- getFileStatus path
      if isDirectory s
        then if includeDirPredicate srcFilepath path
               then relevantFiles srcFilepath path includeDirPredicate includeFilePredicate
               else return []
        else if includeFilePredicate srcFilepath path fp
               then return [path]
               else return []
  return $ concat paths

writeTo :: FilePath -> FilePath -> [FilePath] -> IO ()
writeTo srcFilepath summaryFile files = do
  contents <- forM files $ fileContents srcFilepath
  writeFile summaryFile $ intercalate "\n" contents

fileContents :: FilePath -> FilePath -> IO String
fileContents srcFilepath fp =
  let prefixRemoved = dropWhile (== '/') $ drop (length srcFilepath) fp
   in readFile fp <&> (\s -> "{-# START_FILE " <> prefixRemoved <> " #-}" <> "\n" <> s)
