{-# START_FILE package.yaml #-}
# This YAML file describes your package. Stack will automatically generate a
# Cabal file when you run `stack build`. See the hpack website for help with
# this file: <https://github.com/sol/hpack>.
name: {{ name }}
version: '0.0.0'
github: "{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}"
license: MIT
author: "{{author-name}}{{^author-name}}Author name here{{/author-name}}"
maintainer: "{{author-name}}{{^author-name}}Author name here{{/author-name}}"
# synopsis: A new Haskeleton package.
# description: {{ name }} is a new Haskeleton package.
# category: Other

extra-source-files:
- package.yaml
- README.md
- stack.yaml

ghc-options: -Wall

library:
  dependencies:
  - base
  source-dirs: src

executables:
  {{ name }}:
    source-dirs: app
    main: Main.hs
    dependencies:
    - base
    - {{ name }}
    ghc-options:
    - -rtsopts
    - -threaded
    - -with-rtsopts=-N

benchmarks:
  {{ name }}-benchmarks:
    source-dirs: benchmark
    main: Main.hs
    dependencies:
    - base
    - {{ name }}
    - criterion
    ghc-options:
    - -rtsopts
    - -threaded
    - -with-rtsopts=-N

tests:
  {{ name }}-test-suite:
    source-dirs: test
    main: Main.hs
    dependencies:
    - base
    - {{ name }}
    - tasty
    - tasty-hspec
    ghc-options:
    - -rtsopts
    - -threaded
    - -with-rtsopts=-N

{-# START_FILE .gitignore #-}
# Stack uses this directory as scratch space.
/.stack-work/
# Stack generates the Cabal file from `package.yaml` through hpack.
/*.cabal

{-# START_FILE README.md #-}
# [{{ name }}][]

This is a modified version of Haskeleton.

Before you get started, there are a few things that this template couldn't
provide for you. You should:

-   Add a synopsis to `package.yaml`. It should be a short (one sentence)
    explanation of your project.

-   Add a description to `package.yaml`. This can be whatever you want it to
    be.

-   Add a category to `package.yaml`. A list of categories is available on
    Hackage at <http://hackage.haskell.org/packages>.

-   Rename `src/Example.hs` to whatever you want your top-level module to
    be called. Typically this is the same as your package name but in
    `CamelCase` instead of `kebab-case`.

    -   Don't forget to rename the reference to it in
        `app/Main.hs`!

-   If you are on an older version of Stack (<1.0.4), delete `package.yaml` and
    remove `/*.cabal` from your `.gitignore`.

Once you've done that, start working on your project with the Stack commands:

``` sh
# Build the project.
stack build

# Run the test suite.
stack test

# Run the benchmarks.
stack bench

# Generate documentation.
stack haddock
```

[{{ name }}]: https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{ name }}

{-# START_FILE Setup.hs #-}
-- This script is used to build and install your package. Typically you don't
-- need to change it. The Cabal documentation has more information about this
-- file: <https://www.haskell.org/cabal/users-guide/installing-packages.html>.
import qualified Distribution.Simple

main :: IO ()
main = Distribution.Simple.defaultMain

{-# START_FILE benchmark/Main.hs #-}
-- You can benchmark your code quickly and effectively with Criterion. See its
-- website for help: <http://www.serpentine.com/criterion/>.
import Criterion.Main

main :: IO ()
main = defaultMain [bench "const" (whnf const ())]

{-# START_FILE app/Main.hs #-}
-- It is generally a good idea to keep all your business logic in your library
-- and only use it in the app. Doing so allows others to use what you
-- wrote in their libraries.
import qualified Example

main :: IO ()
main = Example.main

{-# START_FILE src/Example.hs #-}
-- | An example module.
module Example (main) where

-- | An example function.
main :: IO ()
main = return ()

{-# START_FILE test/Main.hs #-}
-- Tasty makes it easy to test your code. It is a test framework that can
-- combine many different types of tests into one suite. See its website for
-- help: <http://documentup.com/feuerbach/tasty>.
import qualified Test.Tasty
-- Hspec is one of the providers for Tasty. It provides a nice syntax for
-- writing tests. Its website has more info: <https://hspec.github.io>.
import Test.Tasty.Hspec

main :: IO ()
main = do
    test <- testSpec "{{ name }}" spec
    Test.Tasty.defaultMain test

spec :: Spec
spec = parallel $ do
    it "is trivially true" $ do
        True `shouldBe` True
